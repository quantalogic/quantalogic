{
  "config_hash": "c9c088339a5f9c26c4083aa44972e473",
  "servers": {
    "playwright": {
      "command": "npx",
      "args": [
        "@playwright/mcp@latest"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "browser_close": {
          "name": "browser_close",
          "description": "Close the page",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_wait": {
          "name": "browser_wait",
          "description": "Wait for a specified time in seconds",
          "arguments": [
            {
              "name": "time",
              "type": "number",
              "description": "The time to wait in seconds",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_resize": {
          "name": "browser_resize",
          "description": "Resize the browser window",
          "arguments": [
            {
              "name": "width",
              "type": "number",
              "description": "Width of the browser window",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "height",
              "type": "number",
              "description": "Height of the browser window",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_console_messages": {
          "name": "browser_console_messages",
          "description": "Returns all console messages",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_handle_dialog": {
          "name": "browser_handle_dialog",
          "description": "Handle a dialog",
          "arguments": [
            {
              "name": "accept",
              "type": "boolean",
              "description": "Whether to accept the dialog.",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "promptText",
              "type": "string",
              "description": "The text of the prompt in case of a prompt dialog.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_file_upload": {
          "name": "browser_file_upload",
          "description": "Upload one or multiple files",
          "arguments": [
            {
              "name": "paths",
              "type": "array",
              "description": "The absolute paths to the files to upload. Can be a single file or multiple files.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_install": {
          "name": "browser_install",
          "description": "Install the browser specified in the config. Call this if you get an error about the browser not being installed.",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_press_key": {
          "name": "browser_press_key",
          "description": "Press a key on the keyboard",
          "arguments": [
            {
              "name": "key",
              "type": "string",
              "description": "Name of the key to press or a character to generate, such as `ArrowLeft` or `a`",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_navigate": {
          "name": "browser_navigate",
          "description": "Navigate to a URL",
          "arguments": [
            {
              "name": "url",
              "type": "string",
              "description": "The URL to navigate to",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_navigate_back": {
          "name": "browser_navigate_back",
          "description": "Go back to the previous page",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_navigate_forward": {
          "name": "browser_navigate_forward",
          "description": "Go forward to the next page",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_network_requests": {
          "name": "browser_network_requests",
          "description": "Returns all network requests since loading the page",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_pdf_save": {
          "name": "browser_pdf_save",
          "description": "Save page as PDF",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_snapshot": {
          "name": "browser_snapshot",
          "description": "Capture accessibility snapshot of the current page, this is better than screenshot",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_click": {
          "name": "browser_click",
          "description": "Perform click on a web page",
          "arguments": [
            {
              "name": "element",
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "ref",
              "type": "string",
              "description": "Exact target element reference from the page snapshot",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_drag": {
          "name": "browser_drag",
          "description": "Perform drag and drop between two elements",
          "arguments": [
            {
              "name": "startElement",
              "type": "string",
              "description": "Human-readable source element description used to obtain the permission to interact with the element",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "startRef",
              "type": "string",
              "description": "Exact source element reference from the page snapshot",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "endElement",
              "type": "string",
              "description": "Human-readable target element description used to obtain the permission to interact with the element",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "endRef",
              "type": "string",
              "description": "Exact target element reference from the page snapshot",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_hover": {
          "name": "browser_hover",
          "description": "Hover over element on page",
          "arguments": [
            {
              "name": "element",
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "ref",
              "type": "string",
              "description": "Exact target element reference from the page snapshot",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_type": {
          "name": "browser_type",
          "description": "Type text into editable element",
          "arguments": [
            {
              "name": "element",
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "ref",
              "type": "string",
              "description": "Exact target element reference from the page snapshot",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "text",
              "type": "string",
              "description": "Text to type into the element",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "submit",
              "type": "boolean",
              "description": "Whether to submit entered text (press Enter after)",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "slowly",
              "type": "boolean",
              "description": "Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_select_option": {
          "name": "browser_select_option",
          "description": "Select an option in a dropdown",
          "arguments": [
            {
              "name": "element",
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "ref",
              "type": "string",
              "description": "Exact target element reference from the page snapshot",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "values",
              "type": "array",
              "description": "Array of values to select in the dropdown. This can be a single value or multiple values.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_take_screenshot": {
          "name": "browser_take_screenshot",
          "description": "Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.",
          "arguments": [
            {
              "name": "raw",
              "type": "boolean",
              "description": "Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "element",
              "type": "string",
              "description": "Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too.",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "ref",
              "type": "string",
              "description": "Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_tab_list": {
          "name": "browser_tab_list",
          "description": "List browser tabs",
          "arguments": [],
          "return_type": "Any"
        },
        "browser_tab_new": {
          "name": "browser_tab_new",
          "description": "Open a new tab",
          "arguments": [
            {
              "name": "url",
              "type": "string",
              "description": "The URL to navigate to in the new tab. If not provided, the new tab will be blank.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_tab_select": {
          "name": "browser_tab_select",
          "description": "Select a tab by index",
          "arguments": [
            {
              "name": "index",
              "type": "number",
              "description": "The index of the tab to select",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "browser_tab_close": {
          "name": "browser_tab_close",
          "description": "Close a tab",
          "arguments": [
            {
              "name": "index",
              "type": "number",
              "description": "The index of the tab to close. Closes current tab if not provided.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    },
    "youtube": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/adhikasp/mcp-youtube",
        "mcp-youtube"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "youtube-transcript": {
          "name": "youtube-transcript",
          "description": "Get transcript from YouTube videos",
          "arguments": [
            {
              "name": "video_url",
              "type": "string",
              "description": "Argument for youtube-transcript",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "with_timestamps",
              "type": "boolean",
              "description": "Argument for youtube-transcript",
              "required": false,
              "default": false,
              "example": null
            },
            {
              "name": "language",
              "type": "string",
              "description": "Argument for youtube-transcript",
              "required": false,
              "default": "en",
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    },
    "mcp-git-ingest": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/adhikasp/mcp-git-ingest",
        "mcp-git-ingest"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "git_directory_structure": {
          "name": "git_directory_structure",
          "description": "\n    Clone a Git repository and return its directory structure in a tree format.\n    \n    Args:\n        repo_url: The URL of the Git repository\n        \n    Returns:\n        A string representation of the repository's directory structure\n    ",
          "arguments": [
            {
              "name": "repo_url",
              "type": "string",
              "description": "Argument for git_directory_structure",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "git_read_important_files": {
          "name": "git_read_important_files",
          "description": "\n    Read the contents of specified files in a given git repository.\n    \n    Args:\n        repo_url: The URL of the Git repository\n        file_paths: List of file paths to read (relative to repository root)\n        \n    Returns:\n        A dictionary mapping file paths to their contents\n    ",
          "arguments": [
            {
              "name": "repo_url",
              "type": "string",
              "description": "Argument for git_read_important_files",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "file_paths",
              "type": "array",
              "description": "Argument for git_read_important_files",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    },
    "sqlite": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-v",
        "mcp-test:/mcp",
        "mcp/sqlite",
        "--db-path",
        "/mcp/test.db"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "read_query": {
          "name": "read_query",
          "description": "Execute a SELECT query on the SQLite database",
          "arguments": [
            {
              "name": "query",
              "type": "string",
              "description": "SELECT SQL query to execute",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "write_query": {
          "name": "write_query",
          "description": "Execute an INSERT, UPDATE, or DELETE query on the SQLite database",
          "arguments": [
            {
              "name": "query",
              "type": "string",
              "description": "SQL query to execute",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "create_table": {
          "name": "create_table",
          "description": "Create a new table in the SQLite database",
          "arguments": [
            {
              "name": "query",
              "type": "string",
              "description": "CREATE TABLE SQL statement",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "list_tables": {
          "name": "list_tables",
          "description": "List all tables in the SQLite database",
          "arguments": [],
          "return_type": "Any"
        },
        "describe_table": {
          "name": "describe_table",
          "description": "Get the schema information for a specific table",
          "arguments": [
            {
              "name": "table_name",
              "type": "string",
              "description": "Name of the table to describe",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "append_insight": {
          "name": "append_insight",
          "description": "Add a business insight to the memo",
          "arguments": [
            {
              "name": "insight",
              "type": "string",
              "description": "Business insight discovered from data analysis",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    },
    "mcp_hn": {
      "command": "uvx",
      "args": [
        "mcp-hn"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "get_stories": {
          "name": "get_stories",
          "description": "Get stories from Hacker News. The options are `top`, `new`, `ask_hn`, `show_hn` for types of stories. This doesn't include the comments. Use `get_story_info` to get the comments.",
          "arguments": [
            {
              "name": "story_type",
              "type": "string",
              "description": "Type of stories to get, one of: `top`, `new`, `ask_hn`, `show_hn`",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "num_stories",
              "type": "integer",
              "description": "Number of stories to get",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "get_user_info": {
          "name": "get_user_info",
          "description": "Get user info from Hacker News, including the stories they've submitted",
          "arguments": [
            {
              "name": "user_name",
              "type": "string",
              "description": "Username of the user",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "num_stories",
              "type": "integer",
              "description": "Number of stories to get, defaults to 10",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "search_stories": {
          "name": "search_stories",
          "description": "Search stories from Hacker News. It is generally recommended to use simpler queries to get a broader set of results (less than 5 words). Very targetted queries may not return any results.",
          "arguments": [
            {
              "name": "query",
              "type": "string",
              "description": "Search query",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "search_by_date",
              "type": "boolean",
              "description": "Search by date, defaults to False. If this is False, then we search by relevance, then points, then number of comments.",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "num_results",
              "type": "integer",
              "description": "Number of results to get, defaults to 10",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "get_story_info": {
          "name": "get_story_info",
          "description": "Get detailed story info from Hacker News, including the comments",
          "arguments": [
            {
              "name": "story_id",
              "type": "integer",
              "description": "Story ID",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    },
    "fetcher": {
      "command": "npx",
      "args": [
        "-y",
        "fetcher-mcp"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "fetch_url": {
          "name": "fetch_url",
          "description": "Retrieve web page content from a specified URL",
          "arguments": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to fetch",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "timeout",
              "type": "number",
              "description": "Page loading timeout in milliseconds, default is 30000 (30 seconds)",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "waitUntil",
              "type": "string",
              "description": "Specifies when navigation is considered complete, options: 'load', 'domcontentloaded', 'networkidle', 'commit', default is 'load'",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "extractContent",
              "type": "boolean",
              "description": "Whether to intelligently extract the main content, default is true",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "maxLength",
              "type": "number",
              "description": "Maximum length of returned content (in characters), default is no limit",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "returnHtml",
              "type": "boolean",
              "description": "Whether to return HTML content instead of Markdown, default is false",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "waitForNavigation",
              "type": "boolean",
              "description": "Whether to wait for additional navigation after initial page load (useful for sites with anti-bot verification), default is false",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "navigationTimeout",
              "type": "number",
              "description": "Maximum time to wait for additional navigation in milliseconds, default is 10000 (10 seconds)",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "disableMedia",
              "type": "boolean",
              "description": "Whether to disable media resources (images, stylesheets, fonts, media), default is true",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "debug",
              "type": "boolean",
              "description": "Whether to enable debug mode (showing browser window), overrides the --debug command line flag if specified",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        },
        "fetch_urls": {
          "name": "fetch_urls",
          "description": "Retrieve web page content from multiple specified URLs",
          "arguments": [
            {
              "name": "urls",
              "type": "array",
              "description": "Array of URLs to fetch",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "timeout",
              "type": "number",
              "description": "Page loading timeout in milliseconds, default is 30000 (30 seconds)",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "waitUntil",
              "type": "string",
              "description": "Specifies when navigation is considered complete, options: 'load', 'domcontentloaded', 'networkidle', 'commit', default is 'load'",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "extractContent",
              "type": "boolean",
              "description": "Whether to intelligently extract the main content, default is true",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "maxLength",
              "type": "number",
              "description": "Maximum length of returned content (in characters), default is no limit",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "returnHtml",
              "type": "boolean",
              "description": "Whether to return HTML content instead of Markdown, default is false",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "waitForNavigation",
              "type": "boolean",
              "description": "Whether to wait for additional navigation after initial page load (useful for sites with anti-bot verification), default is false",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "navigationTimeout",
              "type": "number",
              "description": "Maximum time to wait for additional navigation in milliseconds, default is 10000 (10 seconds)",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "disableMedia",
              "type": "boolean",
              "description": "Whether to disable media resources (images, stylesheets, fonts, media), default is true",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "debug",
              "type": "boolean",
              "description": "Whether to enable debug mode (showing browser window), overrides the --debug command line flag if specified",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    },
    "job_search": {
      "command": "npx",
      "args": [
        "-y",
        "job-searchoor"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "get_jobs": {
          "name": "get_jobs",
          "description": "Get the available jobs",
          "arguments": [
            {
              "name": "sinceWhen",
              "type": "string",
              "description": "Since when to get available jobs. e.g., '1d' or '1w' (only days and weeks are supported)",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "excludeKeywords",
              "type": "array",
              "description": "Keywords to exclude from the jobs (if any of the results contains one of these keywords, it will be filtered out)",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "isRemote",
              "type": "boolean",
              "description": "Whether to filter jobs by remote work",
              "required": false,
              "default": null,
              "example": null
            },
            {
              "name": "keywords",
              "type": "array",
              "description": "Keywords to filter jobs by",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    },
    "edgeone": {
      "command": "npx",
      "args": [
        "edgeone-pages-mcp"
      ],
      "env": null,
      "cwd": null,
      "tools": {
        "deploy-html": {
          "name": "deploy-html",
          "description": "Deploy HTML content to EdgeOne Pages, return the public URL",
          "arguments": [
            {
              "name": "value",
              "type": "string",
              "description": "HTML or text content to deploy. Provide complete HTML or text content you want to publish, and the system will return a public URL where your content can be accessed.",
              "required": false,
              "default": null,
              "example": null
            }
          ],
          "return_type": "Any"
        }
      }
    }
  }
}