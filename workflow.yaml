functions:
  greet:
    type: embedded
    code: 'def greet(user_name): return f''Hello, {user_name}!'''
    module: null
    function: null
  check_length:
    type: embedded
    code: 'def check_length(user_name): return len(user_name) < 5'
    module: null
    function: null
  append_char:
    type: embedded
    code: 'def append_char(user_name): return user_name + ''x'''
    module: null
    function: null
  farewell:
    type: embedded
    code: 'def farewell(user_name): return f''Goodbye, {user_name}!'''
    module: null
    function: null
  monitor:
    type: embedded
    code: |-
      async def monitor(event):
                  print(f'[EVENT] {event.event_type.value} @ {event.node_name or "workflow"}')
                  if event.result:
                      print(f'Result: {event.result}')
                  if event.exception:
                      print(f'Error: {event.exception}')
    module: null
    function: null
nodes:
  start:
    function: greet
    sub_workflow: null
    llm_config: null
    template_config: null
    inputs_mapping:
      user_name: name_input
    output: start_result
    retries: 3
    delay: 1.0
    timeout: null
    parallel: false
  check:
    function: check_length
    sub_workflow: null
    llm_config: null
    template_config: null
    inputs_mapping:
      user_name: name_input
    output: continue_loop
    retries: 3
    delay: 1.0
    timeout: null
    parallel: false
  append:
    function: append_char
    sub_workflow: null
    llm_config: null
    template_config: null
    inputs_mapping:
      user_name: name_input
    output: name_input
    retries: 3
    delay: 1.0
    timeout: null
    parallel: false
  end:
    function: farewell
    sub_workflow: null
    llm_config: null
    template_config: null
    inputs_mapping:
      user_name: name_input
    output: end_result
    retries: 3
    delay: 1.0
    timeout: null
    parallel: false
workflow:
  start: start
  transitions:
  - from_node: start
    to_node: check
    condition: null
  - from_node: check
    to_node: append
    condition: null
  - from_node: append
    to_node: start
    condition: ctx.get('continue_loop', False)
  - from_node: append
    to_node: end
    condition: not (ctx.get('continue_loop', False))
  loops: []
  convergence_nodes: []
observers:
- monitor
dependencies:
- requests>=2.28.0
