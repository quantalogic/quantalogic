Before generating the code, follow these steps:

1. **Review the History**: Examine the <History> section below to understand previous thoughts, actions, and results.
2. **Identify Available Variables**: Check the 'Currently available variables' list and 'Available variables' in the history. These are stored in the `context_vars` dictionary and can be accessed using `context_vars.get('variable_name', default_value)`.
3. **Understand Variable Types**: Variables in `context_vars` are objects returned by tools, not just their string representations. Refer to tool documentation (e.g., `create_project_plan` returns `PlanResult` with `task_id`, `task_description`, `subtasks`) to access attributes directly (e.g., `plan.task_id`) rather than parsing strings.
4. **Use Previous Results**: Incorporate relevant variables from prior steps to avoid redundant calculations and ensure continuity. For example, if `step1_plan` is a `PlanResult`, retrieve it with `plan = context_vars.get('step1_plan')` and use `plan.task_id`.
5. **Plan Your Approach**: Based on the history and variables, determine the next logical step toward solving the task.

Currently available variables from previous steps: {{ available_vars | join(', ') }}

Solve the following task: 

<Task>
{{ task }}
</Task>

This is step {{ current_step }} out of {{ max_iterations }} allowed steps.

Previous steps:

<History>
{{ history_str }}
</History>

Task:

Generate a Python program with an async main() function that uses the available tools to take the next step toward solving the task.

Essential Requirements:

- **Always check the 'Available variables' from the history** before proceeding. These are listed in the <History> section and stored in the `context_vars` dictionary as objects. Access them using `context_vars.get("variable_name", default_value)` to retrieve results from previous steps.
- **Handle Variable Types Correctly**: Variables in `context_vars` are the actual objects returned by tools (e.g., `PlanResult` from `create_project_plan`). Use attribute access (e.g., `plan.task_id`) instead of string methods like `split()` unless the variable is explicitly a string. Check tool documentation for return types.
- **Build upon previous steps** by using these variables when they are relevant. This avoids redundant work and ensures continuity. For example, if a previous step stored a `PlanResult` as `step1_plan`, retrieve it with `plan = context_vars.get('step1_plan')` and use `plan.task_id`.
- When defining new variables, **prefix them with 'step{{ current_step }}_'** to ensure uniqueness (e.g., `step{{ current_step }}_result`). This prevents overwriting variables from earlier steps.
- Return `"Task completed: [final answer]"` if the task is fully solved in this step.
- Otherwise, return intermediate results as a string to be stored for future steps.
- Handle potential errors in tool arguments gracefully, using try/except blocks if needed.
- Use proper async/await syntax for all asynchronous operations.

Variable Naming Convention:
- Prefix all new variables with 'step{{ current_step }}_' (e.g., `step{{ current_step }}_result = ...`).
- This ensures variables are unique across steps and traceable to their origin.

Example of using variables from previous steps:

Task: "Retrieve the plan from the previous step"
History: 
"===== Step 1 of 5 max =====
Thought: Create a project plan
Action: <code>import asyncio\nasync def main():\n    step1_plan = await quantalogic_planning_toolbox.create_project_plan(task_description='Write an article')\n    return f'{step1_plan}'</code>
Result: task_id='abc123' task_description='Write an article' subtasks=[...]
Available variables: step1_plan"

Code:
import asyncio

async def main():
    # Retrieve previous plan as an object, not a string
    step1_plan = context_vars.get('step1_plan')
    if step1_plan:
        step2_task_id: str = step1_plan.task_id  # Access attribute directly
        step2_retrieved_plan = await quantalogic_planning_toolbox.retrieve_project_plan(task_id=step2_task_id)
        return f"Retrieved plan: {step2_retrieved_plan}"
    return "Error: No plan found from previous step"

Error Reflection:
- If there were errors in previous steps, review the error messages in the <History> section and adjust your code to avoid similar issues.
- For example, if a variable was missing, check `context_vars` with a default value.
- If a tool call failed, verify the arguments and ensure they match the tool's requirements.
- If an error like "'PlanResult' object has no attribute 'split'" occurred, it means you tried to treat an object as a string. Use attribute access instead (e.g., `.task_id`).

The program must:

1. Use only the provided async tools
2. Follow a subset of Python 3.10+ syntax, doesn't allow unsafe operations such as eval() or exec()
3. Include type annotations for variables, give very explicit names to variables
4. Output progress information